{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8a6715c0",
   "metadata": {
    "_cell_guid": "c0492972-a264-4978-981e-127588cc3709",
    "_uuid": "06865f8c-efd2-44a8-9292-7e9f22e0885a",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-05-04T13:59:49.373935Z",
     "iopub.status.busy": "2025-05-04T13:59:49.373447Z",
     "iopub.status.idle": "2025-05-04T13:59:59.707587Z",
     "shell.execute_reply": "2025-05-04T13:59:59.706512Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 10.345592,
     "end_time": "2025-05-04T13:59:59.709563",
     "exception": false,
     "start_time": "2025-05-04T13:59:49.363971",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting pandarallel\r\n",
      "  Downloading pandarallel-1.6.5.tar.gz (14 kB)\r\n",
      "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\r\n",
      "Requirement already satisfied: dill>=0.3.1 in /usr/local/lib/python3.10/dist-packages (from pandarallel) (0.3.8)\r\n",
      "Requirement already satisfied: pandas>=1 in /usr/local/lib/python3.10/dist-packages (from pandarallel) (2.2.3)\r\n",
      "Requirement already satisfied: psutil in /usr/local/lib/python3.10/dist-packages (from pandarallel) (5.9.5)\r\n",
      "Requirement already satisfied: numpy>=1.22.4 in /usr/local/lib/python3.10/dist-packages (from pandas>=1->pandarallel) (1.26.4)\r\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas>=1->pandarallel) (2.9.0.post0)\r\n",
      "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1->pandarallel) (2025.1)\r\n",
      "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas>=1->pandarallel) (2025.1)\r\n",
      "Requirement already satisfied: mkl_fft in /usr/local/lib/python3.10/dist-packages (from numpy>=1.22.4->pandas>=1->pandarallel) (1.3.8)\r\n",
      "Requirement already satisfied: mkl_random in /usr/local/lib/python3.10/dist-packages (from numpy>=1.22.4->pandas>=1->pandarallel) (1.2.4)\r\n",
      "Requirement already satisfied: mkl_umath in /usr/local/lib/python3.10/dist-packages (from numpy>=1.22.4->pandas>=1->pandarallel) (0.1.1)\r\n",
      "Requirement already satisfied: mkl in /usr/local/lib/python3.10/dist-packages (from numpy>=1.22.4->pandas>=1->pandarallel) (2025.0.1)\r\n",
      "Requirement already satisfied: tbb4py in /usr/local/lib/python3.10/dist-packages (from numpy>=1.22.4->pandas>=1->pandarallel) (2022.0.0)\r\n",
      "Requirement already satisfied: mkl-service in /usr/local/lib/python3.10/dist-packages (from numpy>=1.22.4->pandas>=1->pandarallel) (2.4.1)\r\n",
      "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas>=1->pandarallel) (1.17.0)\r\n",
      "Requirement already satisfied: intel-openmp>=2024 in /usr/local/lib/python3.10/dist-packages (from mkl->numpy>=1.22.4->pandas>=1->pandarallel) (2024.2.0)\r\n",
      "Requirement already satisfied: tbb==2022.* in /usr/local/lib/python3.10/dist-packages (from mkl->numpy>=1.22.4->pandas>=1->pandarallel) (2022.0.0)\r\n",
      "Requirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.10/dist-packages (from tbb==2022.*->mkl->numpy>=1.22.4->pandas>=1->pandarallel) (1.2.0)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.10/dist-packages (from mkl_umath->numpy>=1.22.4->pandas>=1->pandarallel) (2024.2.0)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.10/dist-packages (from intel-openmp>=2024->mkl->numpy>=1.22.4->pandas>=1->pandarallel) (2024.2.0)\r\n",
      "Building wheels for collected packages: pandarallel\r\n",
      "  Building wheel for pandarallel (setup.py) ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Created wheel for pandarallel: filename=pandarallel-1.6.5-py3-none-any.whl size=16674 sha256=606979e5c9987c014b75b4851d1a306d7c6d0c90bcfc72522880328b576da504\r\n",
      "  Stored in directory: /root/.cache/pip/wheels/50/4f/1e/34e057bb868842209f1623f195b74fd7eda229308a7352d47f\r\n",
      "Successfully built pandarallel\r\n",
      "Installing collected packages: pandarallel\r\n",
      "Successfully installed pandarallel-1.6.5\r\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "! pip install pandarallel\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "# for dirname, _, filenames in os.walk('/kaggle/input/birdclef-2025/train_audio'):\n",
    "    # for filename in filenames:\n",
    "        # print(os.path.join(dirname, filename))\n",
    "        # pass\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b3bf0011",
   "metadata": {
    "_cell_guid": "d12fcec0-c322-427d-94c5-a35fb6545838",
    "_uuid": "7d1582c7-b934-4308-bef1-2cb926448b35",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-05-04T13:59:59.725339Z",
     "iopub.status.busy": "2025-05-04T13:59:59.724856Z",
     "iopub.status.idle": "2025-05-04T13:59:59.735015Z",
     "shell.execute_reply": "2025-05-04T13:59:59.733616Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.019614,
     "end_time": "2025-05-04T13:59:59.736589",
     "exception": false,
     "start_time": "2025-05-04T13:59:59.716975",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "206\n"
     ]
    }
   ],
   "source": [
    "labels = {'brtpar1', '1139490', 'compau', 'chbant1', 'yehcar1', 'yecspi2', 'watjac1', 'grasal4', 'grbhaw1', \n",
    "          'yebfly1', 'neocor', '81930', 'spbwoo1', '64862', 'grepot1', 'ruther1', 'banana', 'whttro1', \n",
    "          '1462711', '42087', '66531', 'soulap1', 'amakin1', '41970', '65373', '714022', 'bafibi1', 'blcant4', \n",
    "          'rutjac1', 'plbwoo1', 'anhing', 'yehbla2', '21211', 'recwoo1', 'blbgra1', 'creoro1', 'shtfly1', \n",
    "          'amekes', 'blchaw1', '21116', '566513', 'bugtan', 'strcuc1', '1564122', '1462737', 'purgal2', \n",
    "          'socfly1', 'gohman1', 'gycwor1', 'bubwre1', 'blhpar1', '65336', 'solsan', '134933', '24292', \n",
    "          '42113', 'plukit1', 'savhaw1', 'sobtyr1', 'chfmac1', 'yebsee1', '66016', 'blbwre1', 'mastit1', \n",
    "          'smbani', 'whfant1', 'strfly1', 'roahaw', 'rumfly1', '476537', 'butsal1', 'bucmot3', 'colcha1', \n",
    "          'bobfly1', '67082', 'rebbla1', 'pavpig2', '1192948', 'whbman1', 'verfly', 'eardov1', 'norscr1', \n",
    "          'rinkin1', '67252', 'greibi1', 'greegr', 'cattyr', 'laufal1', 'trokin', 'grekis', 'crebob1', \n",
    "          'bubcur1', 'fotfly', 'palhor2', '476538', '24322', 'tropar', 'whwswa1', 'yercac1', '517119', \n",
    "          '24272', 'cocher1', 'labter1', 'bicwre1', 'compot1', 'olipic1', 'blcjay1', 'colara1', 'spepar1', \n",
    "          'cregua1', 'cargra1', '22976', 'plctan1', '715170', 'leagre', '22973', 'bkmtou1', 'yelori1', \n",
    "          'trsowl', 'strher', 'ragmac1', 'yeofly1', '548639', 'tbsfin1', '135045', '65344', 'bkcdon', \n",
    "          'stbwoo2', 'piepuf1', '868458', '963335', 'blctit1', 'saffin', 'rtlhum', 'royfly1', '66893', \n",
    "          'rutpuf1', 'linwoo1', 'wbwwre1', 'srwswa1', '126247', 'gretin1', 'grnkin', 'littin1', 'secfly1', \n",
    "          '41778', '528041', 'bbwduc', 'greani1', 'rubsee1', 'orcpar', 'rosspo1', 'yebela1', '47067', \n",
    "          'crcwoo1', '65349', 'snoegr', 'gybmar', 'thbeup1', '66578', 'turvul', 'rugdov', 'baymac', \n",
    "          'speowl1', 'cocwoo1', 'cotfly1', 'y00678', '65419', 'bobher1', '52884', '41663', '22333', \n",
    "          'piwtyr1', '21038', '787625', 'rufmot1', '65962', 'paltan1', '48124', '555142', '65547', \n",
    "          'crbtan1', '1194042', 'ywcpar', 'shghum1', 'cinbec1', 'thlsch3', '1346504', '555086', 'sahpar1', \n",
    "          'grysee1', 'blkvul', '523060', 'strowl1', 'whbant1', 'whmtyr1', '65448', 'ampkin1', 'whtdov', \n",
    "          'yectyr1', '42007', '46010', 'pirfly1', 'woosto', 'babwar', '50186'}\n",
    "print(len(labels))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e21bc44a",
   "metadata": {
    "_cell_guid": "7e2e0e2d-61f6-4f04-926a-6d3213cde37c",
    "_uuid": "f2cccdd0-2b59-4596-8461-962c18bb52b7",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-05-04T13:59:59.752394Z",
     "iopub.status.busy": "2025-05-04T13:59:59.752020Z",
     "iopub.status.idle": "2025-05-04T14:00:18.893799Z",
     "shell.execute_reply": "2025-05-04T14:00:18.892623Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 19.151924,
     "end_time": "2025-05-04T14:00:18.895986",
     "exception": false,
     "start_time": "2025-05-04T13:59:59.744062",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import os\n",
    "from IPython.display import Audio\n",
    "from scipy.io import wavfile\n",
    "import soundfile as sf\n",
    "import tensorflow as tf\n",
    "import tensorflow_hub as hub\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "from sklearn.model_selection import train_test_split\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras import layers, models\n",
    "from sklearn.metrics import classification_report\n",
    "import scipy.signal\n",
    "from tqdm import tqdm\n",
    "flag = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "27a1a3d7",
   "metadata": {
    "_cell_guid": "6bfaabde-4d94-47b0-b0d5-ca75ba8e961e",
    "_uuid": "50f45f5a-29ad-4b38-842e-763412cd51ea",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-05-04T14:00:18.912727Z",
     "iopub.status.busy": "2025-05-04T14:00:18.912040Z",
     "iopub.status.idle": "2025-05-04T14:00:18.917530Z",
     "shell.execute_reply": "2025-05-04T14:00:18.916322Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.015799,
     "end_time": "2025-05-04T14:00:18.919595",
     "exception": false,
     "start_time": "2025-05-04T14:00:18.903796",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def ensure_sample_rate(original_sample_rate, waveform, desired_sample_rate=22000):\n",
    "    if original_sample_rate != desired_sample_rate:\n",
    "        desired_length = int(\n",
    "            round(float(len(waveform))/original_sample_rate * desired_sample_rate))\n",
    "        waveform = scipy.signal.resample(waveform, desired_length)\n",
    "    return desired_sample_rate, waveform"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "80265181",
   "metadata": {
    "_cell_guid": "864fe43d-6dc2-4b7f-9aaf-eae3ca7506c0",
    "_uuid": "815b5ee9-300a-46c7-a58f-b34ef3e1b410",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-05-04T14:00:18.935336Z",
     "iopub.status.busy": "2025-05-04T14:00:18.934936Z",
     "iopub.status.idle": "2025-05-04T14:00:18.940025Z",
     "shell.execute_reply": "2025-05-04T14:00:18.938797Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.014862,
     "end_time": "2025-05-04T14:00:18.941774",
     "exception": false,
     "start_time": "2025-05-04T14:00:18.926912",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def read_audio(filename):\n",
    "    wav_data, sample_rate = sf.read(file=filename, dtype=np.int16)\n",
    "    if len(wav_data.shape) > 1:\n",
    "        wav_data = np.mean(wav_data, axis=1)\n",
    "    sample_rate, wav_data = ensure_sample_rate(sample_rate, wav_data)\n",
    "    return sample_rate, wav_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8a50ccec",
   "metadata": {
    "_cell_guid": "1dca9713-a909-4e49-b6b0-82330ce3d220",
    "_uuid": "4121086d-c342-4272-89c9-d3dc8774759d",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-05-04T14:00:18.958167Z",
     "iopub.status.busy": "2025-05-04T14:00:18.957767Z",
     "iopub.status.idle": "2025-05-04T14:00:55.040096Z",
     "shell.execute_reply": "2025-05-04T14:00:55.038829Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 36.098902,
     "end_time": "2025-05-04T14:00:55.048003",
     "exception": false,
     "start_time": "2025-05-04T14:00:18.949101",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                          audio_path    class\n",
      "0  /kaggle/input/birdclef-2025/train_audio/greani...  greani1\n",
      "1  /kaggle/input/birdclef-2025/train_audio/greani...  greani1\n",
      "2  /kaggle/input/birdclef-2025/train_audio/greani...  greani1\n",
      "3  /kaggle/input/birdclef-2025/train_audio/greani...  greani1\n",
      "4  /kaggle/input/birdclef-2025/train_audio/greani...  greani1\n",
      "\n",
      "DataFrame shape: (28564, 2)\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import pandas as pd\n",
    "\n",
    "# Define the root directory containing the audio files\n",
    "root_dir = '/kaggle/input/birdclef-2025/train_audio' # Adjust if your path is different\n",
    "\n",
    "# List to store the data for the DataFrame\n",
    "audio_data_list = []\n",
    "\n",
    "# Walk through the directory structure\n",
    "for dirname, _, filenames in os.walk(root_dir):\n",
    "    # Skip the root directory itself if it doesn't contain class folders directly\n",
    "    # (Adjust this condition if your structure is different)\n",
    "    if dirname == root_dir:\n",
    "        continue\n",
    "\n",
    "    # Extract the class name (subdirectory name)\n",
    "    # os.path.basename gets the last part of the directory path\n",
    "    class_name = os.path.basename(dirname)\n",
    "\n",
    "    # Iterate through files in the current directory\n",
    "    for filename in filenames:\n",
    "        # Construct the full path to the audio file\n",
    "        full_path = os.path.join(dirname, filename)\n",
    "\n",
    "        # Append the file path and its class to the list\n",
    "        audio_data_list.append([full_path, class_name])\n",
    "        # You can remove the print statement if you don't need it anymore\n",
    "        # print(full_path) # Optional: print the path as it's processed\n",
    "\n",
    "# Create the Pandas DataFrame\n",
    "audio_dataframe = pd.DataFrame(audio_data_list, columns=[\"audio_path\", \"class\"])\n",
    "\n",
    "# Display the first few rows of the DataFrame (optional)\n",
    "print(audio_dataframe.head())\n",
    "\n",
    "# Display the shape of the DataFrame (optional)\n",
    "print(f\"\\nDataFrame shape: {audio_dataframe.shape}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ac82f42e",
   "metadata": {
    "_cell_guid": "e34eed76-cb7b-440e-9833-13cee54e7eaa",
    "_uuid": "e22d37fd-03e9-47dd-85d6-0df6a5124199",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-05-04T14:00:55.063562Z",
     "iopub.status.busy": "2025-05-04T14:00:55.063194Z",
     "iopub.status.idle": "2025-05-04T14:00:56.356972Z",
     "shell.execute_reply": "2025-05-04T14:00:56.355776Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 1.303775,
     "end_time": "2025-05-04T14:00:56.358921",
     "exception": false,
     "start_time": "2025-05-04T14:00:55.055146",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "audio_path        NaN\n",
       "class             NaN\n",
       "0             greani1\n",
       "1             greani1\n",
       "127           thbeup1\n",
       "               ...   \n",
       "27762          528041\n",
       "27763         yercac1\n",
       "27764         yercac1\n",
       "28065         wbwwre1\n",
       "28066         wbwwre1\n",
       "Name: class, Length: 414, dtype: object"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = audio_dataframe.iloc[0]\n",
    "\n",
    "for i in audio_dataframe['class'].unique():\n",
    "    df_sub = audio_dataframe[audio_dataframe['class'] == i]\n",
    "    num_rows = 2\n",
    "    # print(len(df_sub.index))\n",
    "    if len(df_sub.index) < num_rows:\n",
    "        num_rows = len(df_sub.index)\n",
    "    # print(num_rows)\n",
    "    df_sub = audio_dataframe[audio_dataframe['class'] == i].iloc[:num_rows]\n",
    "    # print(df_sub)\n",
    "    df = pd.concat([df,df_sub])\n",
    "df['class']\n",
    "\n",
    "# flag = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f6f7865a",
   "metadata": {
    "_cell_guid": "977fe82e-9a6e-4262-858d-9bdf56e4bd1a",
    "_uuid": "a8b30ee5-27f6-4929-8939-116228480d8e",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-05-04T14:00:56.376879Z",
     "iopub.status.busy": "2025-05-04T14:00:56.376483Z",
     "iopub.status.idle": "2025-05-04T14:03:23.489726Z",
     "shell.execute_reply": "2025-05-04T14:03:23.488185Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 147.123585,
     "end_time": "2025-05-04T14:03:23.491796",
     "exception": false,
     "start_time": "2025-05-04T14:00:56.368211",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using 4 workers.\n",
      "Starting parallel processing with concurrent.futures...\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "5ce92dffc17f432ebb3ea61b235841fe",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Reading audio files:   0%|          | 0/414 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Path at index 0 generated an exception: Invalid file: nan\n",
      "Path at index 1 generated an exception: Invalid file: nan\n",
      "Finished parallel processing.\n",
      "                                                            0  \\\n",
      "audio_path  /kaggle/input/birdclef-2025/train_audio/greani...   \n",
      "class                                                 greani1   \n",
      "0                                                         NaN   \n",
      "1                                                         NaN   \n",
      "127                                                       NaN   \n",
      "\n",
      "                                                   audio_path    class  \\\n",
      "audio_path                                                NaN      NaN   \n",
      "class                                                     NaN      NaN   \n",
      "0           /kaggle/input/birdclef-2025/train_audio/greani...  greani1   \n",
      "1           /kaggle/input/birdclef-2025/train_audio/greani...  greani1   \n",
      "127         /kaggle/input/birdclef-2025/train_audio/thbeup...  thbeup1   \n",
      "\n",
      "                                                   audio_data  \n",
      "audio_path                                               None  \n",
      "class                                                    None  \n",
      "0           (22000, [0.37219046485309565, 0.08794960037434...  \n",
      "1           (22000, [-110.65109836872698, 31.9560972163999...  \n",
      "127         (22000, [0.02443199830545253, 0.15852787986383...  \n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import concurrent.futures\n",
    "from tqdm.auto import tqdm\n",
    "import time # Just for mock function\n",
    "import os # To get cpu count\n",
    "if flag == 0:\n",
    "    \n",
    "    # Get the list of paths to process\n",
    "    paths_to_process = df['audio_path'].tolist()\n",
    "\n",
    "    # Determine number of workers (e.g., number of CPU cores)\n",
    "    # Adjust based on memory constraints and task type (CPU vs I/O bound)\n",
    "    num_workers = os.cpu_count()\n",
    "    print(f\"Using {num_workers} workers.\")\n",
    "\n",
    "    results = [None] * len(paths_to_process) # Preallocate results list\n",
    "\n",
    "    print(\"Starting parallel processing with concurrent.futures...\")\n",
    "    # Use ProcessPoolExecutor for CPU-bound tasks\n",
    "    with concurrent.futures.ProcessPoolExecutor(max_workers=num_workers) as executor:\n",
    "        # Use executor.map to apply the function in parallel\n",
    "        # Wrap executor.map with tqdm for a progress bar\n",
    "        # executor.map preserves the order of the input iterable\n",
    "        future_to_path = {executor.submit(read_audio, path): i for i, path in enumerate(paths_to_process)}\n",
    "\n",
    "        for future in tqdm(concurrent.futures.as_completed(future_to_path), total=len(paths_to_process), desc=\"Reading audio files\"):\n",
    "            index = future_to_path[future]\n",
    "            try:\n",
    "                results[index] = future.result()\n",
    "            except Exception as exc:\n",
    "                print(f'Path at index {index} generated an exception: {exc}')\n",
    "                results[index] = None # Or some other error indicator\n",
    "    flag = 1\n",
    "    print(\"Finished parallel processing.\")\n",
    "\n",
    "    # Assign the results back to the DataFrame\n",
    "    df['audio_data'] = results\n",
    "    df.to_pickle('/kaggle/working/df.pk1')\n",
    "    print(df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ea6c1277",
   "metadata": {
    "_cell_guid": "a0870745-efe2-43a5-84ee-eb84e58b272d",
    "_uuid": "c4191425-c246-40c9-9374-e5ba95ff31ef",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-05-04T14:03:23.509297Z",
     "iopub.status.busy": "2025-05-04T14:03:23.508912Z",
     "iopub.status.idle": "2025-05-04T14:03:23.513592Z",
     "shell.execute_reply": "2025-05-04T14:03:23.512741Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.015404,
     "end_time": "2025-05-04T14:03:23.515240",
     "exception": false,
     "start_time": "2025-05-04T14:03:23.499836",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import re\n",
    "\n",
    "def audio_data_unfucker(fucked_tuple: tuple) -> list:\n",
    "        assert(type(fucked_tuple[1]) != int)\n",
    "        return fucked_tuple[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e1025330",
   "metadata": {
    "_cell_guid": "4d65d6a6-763d-400d-b9ed-ba0683348fda",
    "_uuid": "e5124c66-5846-45c9-b0de-c024b252b875",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-05-04T14:03:23.532152Z",
     "iopub.status.busy": "2025-05-04T14:03:23.531788Z",
     "iopub.status.idle": "2025-05-04T14:03:25.576270Z",
     "shell.execute_reply": "2025-05-04T14:03:25.575045Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 2.055054,
     "end_time": "2025-05-04T14:03:25.578128",
     "exception": false,
     "start_time": "2025-05-04T14:03:23.523074",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index([0, 'audio_path', 'class', 'audio_data'], dtype='object')\n"
     ]
    }
   ],
   "source": [
    "if flag == 1:\n",
    "    pass\n",
    "else:\n",
    "    flag = 1\n",
    "df = pd.read_pickle('/kaggle/working/df.pk1')\n",
    "df = df.iloc[2:]\n",
    "print(df.columns)\n",
    "df['audio_data'] = df['audio_data'].apply(audio_data_unfucker)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9cb3da3f",
   "metadata": {
    "_cell_guid": "a645c135-06d9-4af0-abf6-31e6fdf726f5",
    "_uuid": "3a81fb7f-2eed-4a4d-a30d-989cb47f221d",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-05-04T14:03:25.595534Z",
     "iopub.status.busy": "2025-05-04T14:03:25.595185Z",
     "iopub.status.idle": "2025-05-04T14:03:25.599796Z",
     "shell.execute_reply": "2025-05-04T14:03:25.598736Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.015106,
     "end_time": "2025-05-04T14:03:25.601530",
     "exception": false,
     "start_time": "2025-05-04T14:03:25.586424",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "audio_data = df['audio_data'].copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e6ff00e7",
   "metadata": {
    "_cell_guid": "88fd1701-e577-4f4d-819b-40827b85c463",
    "_uuid": "532a3805-4956-4a69-8092-9cc4ecb70f22",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-05-04T14:03:25.619048Z",
     "iopub.status.busy": "2025-05-04T14:03:25.618701Z",
     "iopub.status.idle": "2025-05-04T14:03:27.807052Z",
     "shell.execute_reply": "2025-05-04T14:03:27.805785Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 2.199249,
     "end_time": "2025-05-04T14:03:27.809039",
     "exception": false,
     "start_time": "2025-05-04T14:03:25.609790",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processing audio data with max_len = 1000\n",
      "Original DataFrame has 412 rows.\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d54c9ab9c73b4f5d9f9c6548a8691ace",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Processing Audio:   0%|          | 0/412 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Finished processing.\n",
      "Resulting audio array shape: (360928, 1000)\n",
      "Number of resulting labels: 360928\n"
     ]
    }
   ],
   "source": [
    "max_len = 1000  # Your desired fixed length\n",
    "processed_audio = []\n",
    "processed_labels = []\n",
    "\n",
    "print(f\"Processing audio data with max_len = {max_len}\")\n",
    "print(f\"Original DataFrame has {len(df)} rows.\")\n",
    "\n",
    "# Iterate through the DataFrame rows using itertuples (generally faster)\n",
    "# 'Index' is the DataFrame index, 'audio_data' and 'label' match column names\n",
    "for row in tqdm(df.itertuples(), total=len(df), desc=\"Processing Audio\"):\n",
    "    # --- Get data for the current row ---\n",
    "    # Use getattr for robustness if column names might vary slightly\n",
    "    # print(row)\n",
    "    original_seq = getattr(row, 'audio_data')\n",
    "    original_label = getattr(row, '_3') # Fetch the label\n",
    "\n",
    "    # Ensure the sequence is a numpy array with the desired dtype\n",
    "    # This handles cases where 'audio_data' might contain lists\n",
    "    seq = np.array(original_seq, dtype=np.float32)\n",
    "    current_len = len(seq)\n",
    "\n",
    "    # --- Case 1: Sequence is shorter than max_len ---\n",
    "    if current_len < max_len:\n",
    "        padding_needed = max_len - current_len\n",
    "        # Use np.pad which can be cleaner for padding\n",
    "        padded_seq = np.pad(seq, (0, padding_needed), mode='constant', constant_values=0)\n",
    "        processed_audio.append(padded_seq)\n",
    "        processed_labels.append(original_label) # Append the original label\n",
    "\n",
    "    # --- Case 2: Sequence is exactly max_len ---\n",
    "    elif current_len == max_len:\n",
    "        processed_audio.append(seq) # No padding or truncation needed\n",
    "        processed_labels.append(original_label) # Append the original label\n",
    "\n",
    "    # --- Case 3: Sequence is longer than max_len ---\n",
    "    else:\n",
    "        # Calculate how many full chunks we can get\n",
    "        num_full_chunks = current_len // max_len\n",
    "\n",
    "        # Iterate through the sequence, extracting non-overlapping chunks\n",
    "        for i in range(num_full_chunks):\n",
    "            start_index = i * max_len\n",
    "            end_index = start_index + max_len\n",
    "            chunk = seq[start_index:end_index]\n",
    "            processed_audio.append(chunk)\n",
    "            # Append the SAME original label for EACH chunk\n",
    "            processed_labels.append(original_label)\n",
    "\n",
    "        # --- Handle the remainder (the part left over after full chunks) ---\n",
    "        remainder_len = current_len % max_len\n",
    "        if remainder_len > 0:\n",
    "            # Extract the remainder\n",
    "            remainder_start_index = num_full_chunks * max_len\n",
    "            remainder_chunk = seq[remainder_start_index:]\n",
    "\n",
    "            # Pad the remainder to max_len\n",
    "            padding_needed = max_len - remainder_len\n",
    "            padded_remainder = np.pad(remainder_chunk, (0, padding_needed), mode='constant', constant_values=0)\n",
    "\n",
    "            processed_audio.append(padded_remainder)\n",
    "            # Append the SAME original label for the padded remainder chunk\n",
    "            processed_labels.append(original_label)\n",
    "\n",
    "\n",
    "# --- Final Output ---\n",
    "# Convert lists to numpy arrays (common practice for ML/DL)\n",
    "final_audio_array = np.array(processed_audio)\n",
    "# Labels can be kept as a list or converted to numpy array/pandas Series\n",
    "final_labels = processed_labels # Or np.array(processed_labels)\n",
    "\n",
    "print(f\"\\nFinished processing.\")\n",
    "print(f\"Resulting audio array shape: {final_audio_array.shape}\")\n",
    "# Based on example: (1+1+2+1+1) = 6 samples -> (6, 100)\n",
    "print(f\"Number of resulting labels: {len(final_labels)}\")\n",
    "# Based on example: 6 labels -> ['Short', 'Exact', 'Long', 'Long', 'Long', 'Short_2']\n",
    "# print(\"Example processed labels:\", final_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "4b373904",
   "metadata": {
    "_cell_guid": "a2f4c61b-20fe-438a-9c86-e120ac966b44",
    "_uuid": "992bd950-31c2-419f-b60e-7bedf893bf28",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-05-04T14:03:27.878367Z",
     "iopub.status.busy": "2025-05-04T14:03:27.877962Z",
     "iopub.status.idle": "2025-05-04T14:03:28.409390Z",
     "shell.execute_reply": "2025-05-04T14:03:28.405322Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.571035,
     "end_time": "2025-05-04T14:03:28.411496",
     "exception": false,
     "start_time": "2025-05-04T14:03:27.840461",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original audio array shape: (360928, 1000)\n",
      "Original number of labels: 360928\n",
      "\n",
      "Creating temporary DataFrame with labels and indices...\n",
      "Grouping by label and selecting up to 1000 indices per group...\n",
      "Total indices selected: 166725\n",
      "Filtering original audio array and labels using selected indices...\n",
      "\n",
      "--- Verification ---\n",
      "Limited audio array shape: (166725, 1000)\n",
      "Limited labels array length: 166725\n",
      "Counts per label in the limited dataset:\n",
      "  Label '1139490': 1000 samples\n",
      "  Label '1192948': 1000 samples\n",
      "  Label '1194042': 1000 samples\n",
      "  Label '126247': 712 samples\n",
      "  Label '1346504': 1000 samples\n",
      "  Label '134933': 1000 samples\n",
      "  Label '135045': 1000 samples\n",
      "  Label '1462711': 1000 samples\n",
      "  Label '1462737': 1000 samples\n",
      "  Label '1564122': 71 samples\n",
      "  Label '21038': 1000 samples\n",
      "  Label '21116': 288 samples\n",
      "  Label '21211': 228 samples\n",
      "  Label '22333': 1000 samples\n",
      "  Label '22973': 1000 samples\n",
      "  Label '22976': 724 samples\n",
      "  Label '24272': 588 samples\n",
      "  Label '24292': 1000 samples\n",
      "  Label '24322': 1000 samples\n",
      "  Label '41663': 995 samples\n",
      "  Label '41778': 1000 samples\n",
      "  Label '41970': 158 samples\n",
      "  Label '42007': 363 samples\n",
      "  Label '42087': 466 samples\n",
      "  Label '42113': 500 samples\n",
      "  Label '46010': 1000 samples\n",
      "  Label '47067': 1000 samples\n",
      "  Label '476537': 1000 samples\n",
      "  Label '476538': 1000 samples\n",
      "  Label '48124': 1000 samples\n",
      "  Label '50186': 1000 samples\n",
      "  Label '517119': 642 samples\n",
      "  Label '523060': 216 samples\n",
      "  Label '528041': 1000 samples\n",
      "  Label '52884': 1000 samples\n",
      "  Label '548639': 91 samples\n",
      "  Label '555086': 1000 samples\n",
      "  Label '555142': 753 samples\n",
      "  Label '566513': 1000 samples\n",
      "  Label '64862': 1000 samples\n",
      "  Label '65336': 1000 samples\n",
      "  Label '65344': 1000 samples\n",
      "  Label '65349': 957 samples\n",
      "  Label '65373': 1000 samples\n",
      "  Label '65419': 449 samples\n",
      "  Label '65448': 1000 samples\n",
      "  Label '65547': 1000 samples\n",
      "  Label '65962': 941 samples\n",
      "  Label '66016': 592 samples\n",
      "  Label '66531': 1000 samples\n",
      "  Label '66578': 1000 samples\n",
      "  Label '66893': 955 samples\n",
      "  Label '67082': 972 samples\n",
      "  Label '67252': 424 samples\n",
      "  Label '714022': 1000 samples\n",
      "  Label '715170': 1000 samples\n",
      "  Label '787625': 1000 samples\n",
      "  Label '81930': 977 samples\n",
      "  Label '868458': 226 samples\n",
      "  Label '963335': 1000 samples\n",
      "  Label 'amakin1': 718 samples\n",
      "  Label 'amekes': 918 samples\n",
      "  Label 'ampkin1': 1000 samples\n",
      "  Label 'anhing': 568 samples\n",
      "  Label 'babwar': 491 samples\n",
      "  Label 'bafibi1': 845 samples\n",
      "  Label 'banana': 1000 samples\n",
      "  Label 'baymac': 1000 samples\n",
      "  Label 'bbwduc': 341 samples\n",
      "  Label 'bicwre1': 523 samples\n",
      "  Label 'bkcdon': 1000 samples\n",
      "  Label 'bkmtou1': 1000 samples\n",
      "  Label 'blbgra1': 1000 samples\n",
      "  Label 'blbwre1': 844 samples\n",
      "  Label 'blcant4': 1000 samples\n",
      "  Label 'blchaw1': 447 samples\n",
      "  Label 'blcjay1': 927 samples\n",
      "  Label 'blctit1': 347 samples\n",
      "  Label 'blhpar1': 1000 samples\n",
      "  Label 'blkvul': 975 samples\n",
      "  Label 'bobfly1': 190 samples\n",
      "  Label 'bobher1': 202 samples\n",
      "  Label 'brtpar1': 1000 samples\n",
      "  Label 'bubcur1': 1000 samples\n",
      "  Label 'bubwre1': 1000 samples\n",
      "  Label 'bucmot3': 687 samples\n",
      "  Label 'bugtan': 459 samples\n",
      "  Label 'butsal1': 1000 samples\n",
      "  Label 'cargra1': 1000 samples\n",
      "  Label 'cattyr': 1000 samples\n",
      "  Label 'chbant1': 1000 samples\n",
      "  Label 'chfmac1': 637 samples\n",
      "  Label 'cinbec1': 920 samples\n",
      "  Label 'cocher1': 565 samples\n",
      "  Label 'cocwoo1': 354 samples\n",
      "  Label 'colara1': 1000 samples\n",
      "  Label 'colcha1': 1000 samples\n",
      "  Label 'compau': 421 samples\n",
      "  Label 'compot1': 1000 samples\n",
      "  Label 'cotfly1': 509 samples\n",
      "  Label 'crbtan1': 1000 samples\n",
      "  Label 'crcwoo1': 1000 samples\n",
      "  Label 'crebob1': 1000 samples\n",
      "  Label 'cregua1': 1000 samples\n",
      "  Label 'creoro1': 852 samples\n",
      "  Label 'eardov1': 448 samples\n",
      "  Label 'fotfly': 1000 samples\n",
      "  Label 'gohman1': 709 samples\n",
      "  Label 'grasal4': 1000 samples\n",
      "  Label 'grbhaw1': 501 samples\n",
      "  Label 'greani1': 706 samples\n",
      "  Label 'greegr': 244 samples\n",
      "  Label 'greibi1': 857 samples\n",
      "  Label 'grekis': 570 samples\n",
      "  Label 'grepot1': 371 samples\n",
      "  Label 'gretin1': 1000 samples\n",
      "  Label 'grnkin': 428 samples\n",
      "  Label 'grysee1': 1000 samples\n",
      "  Label 'gybmar': 771 samples\n",
      "  Label 'gycwor1': 1000 samples\n",
      "  Label 'labter1': 880 samples\n",
      "  Label 'laufal1': 754 samples\n",
      "  Label 'leagre': 1000 samples\n",
      "  Label 'linwoo1': 1000 samples\n",
      "  Label 'littin1': 652 samples\n",
      "  Label 'mastit1': 1000 samples\n",
      "  Label 'neocor': 769 samples\n",
      "  Label 'norscr1': 1000 samples\n",
      "  Label 'olipic1': 791 samples\n",
      "  Label 'orcpar': 778 samples\n",
      "  Label 'palhor2': 498 samples\n",
      "  Label 'paltan1': 1000 samples\n",
      "  Label 'pavpig2': 680 samples\n",
      "  Label 'piepuf1': 838 samples\n",
      "  Label 'pirfly1': 1000 samples\n",
      "  Label 'piwtyr1': 357 samples\n",
      "  Label 'plbwoo1': 1000 samples\n",
      "  Label 'plctan1': 1000 samples\n",
      "  Label 'plukit1': 1000 samples\n",
      "  Label 'purgal2': 524 samples\n",
      "  Label 'ragmac1': 513 samples\n",
      "  Label 'rebbla1': 684 samples\n",
      "  Label 'recwoo1': 451 samples\n",
      "  Label 'rinkin1': 1000 samples\n",
      "  Label 'roahaw': 1000 samples\n",
      "  Label 'rosspo1': 1000 samples\n",
      "  Label 'royfly1': 1000 samples\n",
      "  Label 'rtlhum': 457 samples\n",
      "  Label 'rubsee1': 1000 samples\n",
      "  Label 'rufmot1': 1000 samples\n",
      "  Label 'rugdov': 1000 samples\n",
      "  Label 'rumfly1': 420 samples\n",
      "  Label 'ruther1': 1000 samples\n",
      "  Label 'rutjac1': 1000 samples\n",
      "  Label 'rutpuf1': 1000 samples\n",
      "  Label 'saffin': 1000 samples\n",
      "  Label 'sahpar1': 664 samples\n",
      "  Label 'savhaw1': 884 samples\n",
      "  Label 'secfly1': 123 samples\n",
      "  Label 'shghum1': 1000 samples\n",
      "  Label 'shtfly1': 1000 samples\n",
      "  Label 'smbani': 768 samples\n",
      "  Label 'snoegr': 557 samples\n",
      "  Label 'sobtyr1': 762 samples\n",
      "  Label 'socfly1': 457 samples\n",
      "  Label 'solsan': 741 samples\n",
      "  Label 'soulap1': 977 samples\n",
      "  Label 'spbwoo1': 611 samples\n",
      "  Label 'speowl1': 1000 samples\n",
      "  Label 'spepar1': 1000 samples\n",
      "  Label 'srwswa1': 1000 samples\n",
      "  Label 'stbwoo2': 1000 samples\n",
      "  Label 'strcuc1': 1000 samples\n",
      "  Label 'strfly1': 1000 samples\n",
      "  Label 'strher': 496 samples\n",
      "  Label 'strowl1': 1000 samples\n",
      "  Label 'tbsfin1': 448 samples\n",
      "  Label 'thbeup1': 1000 samples\n",
      "  Label 'thlsch3': 476 samples\n",
      "  Label 'trokin': 1000 samples\n",
      "  Label 'tropar': 980 samples\n",
      "  Label 'trsowl': 1000 samples\n",
      "  Label 'turvul': 376 samples\n",
      "  Label 'verfly': 613 samples\n",
      "  Label 'watjac1': 1000 samples\n",
      "  Label 'wbwwre1': 1000 samples\n",
      "  Label 'whbant1': 1000 samples\n",
      "  Label 'whbman1': 1000 samples\n",
      "  Label 'whfant1': 1000 samples\n",
      "  Label 'whmtyr1': 793 samples\n",
      "  Label 'whtdov': 1000 samples\n",
      "  Label 'whttro1': 1000 samples\n",
      "  Label 'whwswa1': 913 samples\n",
      "  Label 'woosto': 1000 samples\n",
      "  Label 'y00678': 1000 samples\n",
      "  Label 'yebela1': 521 samples\n",
      "  Label 'yebfly1': 1000 samples\n",
      "  Label 'yebsee1': 245 samples\n",
      "  Label 'yecspi2': 833 samples\n",
      "  Label 'yectyr1': 812 samples\n",
      "  Label 'yehbla2': 728 samples\n",
      "  Label 'yehcar1': 1000 samples\n",
      "  Label 'yelori1': 698 samples\n",
      "  Label 'yeofly1': 1000 samples\n",
      "  Label 'yercac1': 1000 samples\n",
      "  Label 'ywcpar': 570 samples\n",
      "\n",
      "Downsampling complete.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "print(f\"Original audio array shape: {final_audio_array.shape}\")\n",
    "print(f\"Original number of labels: {len(final_labels)}\")\n",
    "\n",
    "\n",
    "### VARIABLE TO CHANGE\n",
    "limit_per_label = 1000\n",
    "\n",
    "# 1. Create a DataFrame with labels and original indices\n",
    "#    This avoids putting the large audio array into the DataFrame, saving memory.\n",
    "print(\"\\nCreating temporary DataFrame with labels and indices...\")\n",
    "indices_df = pd.DataFrame({\n",
    "    'label': final_labels,\n",
    "    'original_index': np.arange(len(final_labels)) # Store 0, 1, 2, ... N-1\n",
    "})\n",
    "\n",
    "# 2. Group by label and select the first 'limit_per_label' indices for each group\n",
    "print(f\"Grouping by label and selecting up to {limit_per_label} indices per group...\")\n",
    "# .head(n) conveniently takes min(n, group_size) automatically\n",
    "selected_indices_df = indices_df.groupby('label', observed=True).head(limit_per_label)\n",
    "# 'observed=True' can speed up grouping if labels are categorical\n",
    "\n",
    "# --- Alternative: Random Sampling (if you don't want the *first* 100) ---\n",
    "# def sample_or_head(group, n):\n",
    "#     group_size = len(group)\n",
    "#     # Sample if group is large enough, otherwise take all (head)\n",
    "#     return group.sample(n=min(group_size, n), random_state=42) # Use random_state for reproducibility\n",
    "#\n",
    "# selected_indices_df = indices_df.groupby('label', observed=True).apply(sample_or_head, n=limit_per_label).reset_index(drop=True)\n",
    "# print(f\"Grouping by label and randomly sampling up to {limit_per_label} indices per group...\")\n",
    "# --- End Alternative ---\n",
    "\n",
    "\n",
    "# 3. Get the selected original indices\n",
    "selected_indices = selected_indices_df['original_index'].values\n",
    "\n",
    "# Ensure the indices are sorted if you want the final array order to be somewhat grouped by label\n",
    "# This is optional, .head() preserves original relative order within groups.\n",
    "# selected_indices = np.sort(selected_indices)\n",
    "\n",
    "print(f\"Total indices selected: {len(selected_indices)}\")\n",
    "\n",
    "# 4. Use the selected indices to filter your original arrays\n",
    "print(\"Filtering original audio array and labels using selected indices...\")\n",
    "limited_audio_array = final_audio_array[selected_indices]\n",
    "\n",
    "# Ensure final_labels is a numpy array if it isn't already for fancy indexing\n",
    "final_labels_array = np.array(final_labels)\n",
    "limited_labels_array = final_labels_array[selected_indices]\n",
    "\n",
    "# --- Verification (Optional) ---\n",
    "print(\"\\n--- Verification ---\")\n",
    "print(f\"Limited audio array shape: {limited_audio_array.shape}\")\n",
    "print(f\"Limited labels array length: {len(limited_labels_array)}\")\n",
    "\n",
    "# Check counts per label in the limited set\n",
    "unique_labels, counts = np.unique(limited_labels_array, return_counts=True)\n",
    "print(\"Counts per label in the limited dataset:\")\n",
    "for label, count in zip(unique_labels, counts):\n",
    "    print(f\"  Label '{label}': {count} samples\")\n",
    "    if count > limit_per_label:\n",
    "        print(f\"  WARNING: Label '{label}' has more than {limit_per_label} samples!\") # Should not happen with .head()\n",
    "\n",
    "print(\"\\nDownsampling complete.\")\n",
    "\n",
    "# Now use 'limited_audio_array' and 'limited_labels_array' for further steps"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f6150d7d",
   "metadata": {
    "_cell_guid": "5d537e1d-6936-4c82-becb-f7edcbdfae58",
    "_uuid": "47139e48-33e0-4a9d-897d-eec7987fad55",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-05-04T14:03:28.463948Z",
     "iopub.status.busy": "2025-05-04T14:03:28.463560Z",
     "iopub.status.idle": "2025-05-04T14:03:36.218292Z",
     "shell.execute_reply": "2025-05-04T14:03:36.216794Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 7.767433,
     "end_time": "2025-05-04T14:03:36.220393",
     "exception": false,
     "start_time": "2025-05-04T14:03:28.452960",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model_yamnet = hub.load('https://tfhub.dev/google/yamnet/1')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "931cf2fd",
   "metadata": {
    "_cell_guid": "072300bf-dab1-40f2-ba2d-90a0ef11906a",
    "_uuid": "74922e51-60fc-4d4b-8d64-9282189624b9",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-05-04T14:03:36.239483Z",
     "iopub.status.busy": "2025-05-04T14:03:36.239109Z",
     "iopub.status.idle": "2025-05-04T14:26:21.198554Z",
     "shell.execute_reply": "2025-05-04T14:26:21.196766Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 1364.971017,
     "end_time": "2025-05-04T14:26:21.200833",
     "exception": false,
     "start_time": "2025-05-04T14:03:36.229816",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7cb4cdba198248869e0aa302bad87f61",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Generating Audio Embeddings:   0%|          | 0/166725 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "@tf.function\n",
    "def get_embedding(waveform):\n",
    "    waveform = waveform / tf.int16.max\n",
    "    _, embedding, _ = model_yamnet(waveform)\n",
    "    return embedding\n",
    "\n",
    "audio_embeddings = []\n",
    "for wav in tqdm(limited_audio_array, desc=\"Generating Audio Embeddings\"):\n",
    "    emb = get_embedding(wav)\n",
    "    audio_embeddings.append(emb.numpy())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "81e10123",
   "metadata": {
    "_cell_guid": "072fdaf9-4b36-4b9a-ba89-3e5ed7d926d3",
    "_uuid": "6978e048-de39-46ec-9e1b-2b8d0a94c65e",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-05-04T14:26:21.221216Z",
     "iopub.status.busy": "2025-05-04T14:26:21.220794Z",
     "iopub.status.idle": "2025-05-04T14:26:21.924966Z",
     "shell.execute_reply": "2025-05-04T14:26:21.923850Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.716824,
     "end_time": "2025-05-04T14:26:21.927397",
     "exception": false,
     "start_time": "2025-05-04T14:26:21.210573",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generated embeddings array X with shape: (166725, 1024)\n"
     ]
    }
   ],
   "source": [
    "X = np.array(audio_embeddings) # Shape will be (N, 1024)\n",
    "X_reshaped = np.squeeze(X, axis=1) # Specify axis=1 to remove the middle dimension\n",
    "print(f\"Generated embeddings array X with shape: {X_reshaped.shape}\")\n",
    "\n",
    "# Ensure you have the corresponding labels (length N)\n",
    "y = limited_labels_array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "34264991",
   "metadata": {
    "_cell_guid": "da422fe0-2261-4a53-8774-3d2cd857e466",
    "_uuid": "96703e48-f9a8-4045-8758-44dcf03a392f",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-05-04T14:26:21.945658Z",
     "iopub.status.busy": "2025-05-04T14:26:21.945283Z",
     "iopub.status.idle": "2025-05-04T14:26:23.456067Z",
     "shell.execute_reply": "2025-05-04T14:26:23.454852Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 1.521847,
     "end_time": "2025-05-04T14:26:23.457935",
     "exception": false,
     "start_time": "2025-05-04T14:26:21.936088",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Encoding labels...\n",
      "Found 206 unique classes: ['1139490' '1192948' '1194042' '126247' '1346504' '134933' '135045'\n",
      " '1462711' '1462737' '1564122' '21038' '21116' '21211' '22333' '22973'\n",
      " '22976' '24272' '24292' '24322' '41663' '41778' '41970' '42007' '42087'\n",
      " '42113' '46010' '47067' '476537' '476538' '48124' '50186' '517119'\n",
      " '523060' '528041' '52884' '548639' '555086' '555142' '566513' '64862'\n",
      " '65336' '65344' '65349' '65373' '65419' '65448' '65547' '65962' '66016'\n",
      " '66531' '66578' '66893' '67082' '67252' '714022' '715170' '787625'\n",
      " '81930' '868458' '963335' 'amakin1' 'amekes' 'ampkin1' 'anhing' 'babwar'\n",
      " 'bafibi1' 'banana' 'baymac' 'bbwduc' 'bicwre1' 'bkcdon' 'bkmtou1'\n",
      " 'blbgra1' 'blbwre1' 'blcant4' 'blchaw1' 'blcjay1' 'blctit1' 'blhpar1'\n",
      " 'blkvul' 'bobfly1' 'bobher1' 'brtpar1' 'bubcur1' 'bubwre1' 'bucmot3'\n",
      " 'bugtan' 'butsal1' 'cargra1' 'cattyr' 'chbant1' 'chfmac1' 'cinbec1'\n",
      " 'cocher1' 'cocwoo1' 'colara1' 'colcha1' 'compau' 'compot1' 'cotfly1'\n",
      " 'crbtan1' 'crcwoo1' 'crebob1' 'cregua1' 'creoro1' 'eardov1' 'fotfly'\n",
      " 'gohman1' 'grasal4' 'grbhaw1' 'greani1' 'greegr' 'greibi1' 'grekis'\n",
      " 'grepot1' 'gretin1' 'grnkin' 'grysee1' 'gybmar' 'gycwor1' 'labter1'\n",
      " 'laufal1' 'leagre' 'linwoo1' 'littin1' 'mastit1' 'neocor' 'norscr1'\n",
      " 'olipic1' 'orcpar' 'palhor2' 'paltan1' 'pavpig2' 'piepuf1' 'pirfly1'\n",
      " 'piwtyr1' 'plbwoo1' 'plctan1' 'plukit1' 'purgal2' 'ragmac1' 'rebbla1'\n",
      " 'recwoo1' 'rinkin1' 'roahaw' 'rosspo1' 'royfly1' 'rtlhum' 'rubsee1'\n",
      " 'rufmot1' 'rugdov' 'rumfly1' 'ruther1' 'rutjac1' 'rutpuf1' 'saffin'\n",
      " 'sahpar1' 'savhaw1' 'secfly1' 'shghum1' 'shtfly1' 'smbani' 'snoegr'\n",
      " 'sobtyr1' 'socfly1' 'solsan' 'soulap1' 'spbwoo1' 'speowl1' 'spepar1'\n",
      " 'srwswa1' 'stbwoo2' 'strcuc1' 'strfly1' 'strher' 'strowl1' 'tbsfin1'\n",
      " 'thbeup1' 'thlsch3' 'trokin' 'tropar' 'trsowl' 'turvul' 'verfly'\n",
      " 'watjac1' 'wbwwre1' 'whbant1' 'whbman1' 'whfant1' 'whmtyr1' 'whtdov'\n",
      " 'whttro1' 'whwswa1' 'woosto' 'y00678' 'yebela1' 'yebfly1' 'yebsee1'\n",
      " 'yecspi2' 'yectyr1' 'yehbla2' 'yehcar1' 'yelori1' 'yeofly1' 'yercac1'\n",
      " 'ywcpar']\n",
      "One-hot encoded labels shape: (166725, 206)\n",
      "\n",
      "Splitting data into training and testing sets...\n",
      "xtrain shape: (133380, 1024)\n",
      "ytrain_one_hot shape: (133380, 206)\n",
      "xtest shape: (33345, 1024)\n",
      "ytest_one_hot shape: (33345, 206)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "# --- Label Encoding ---\n",
    "print(\"\\nEncoding labels...\")\n",
    "# 1. Encode string/object labels to integers (0, 1, 2, ...)\n",
    "label_encoder = LabelEncoder()\n",
    "y_integer_encoded = label_encoder.fit_transform(y)\n",
    "\n",
    "# 2. Determine the number of unique classes\n",
    "num_classes = len(label_encoder.classes_)\n",
    "print(f\"Found {num_classes} unique classes: {label_encoder.classes_}\")\n",
    "\n",
    "# 3. Convert integer labels to one-hot encoding\n",
    "y_one_hot = tf.keras.utils.to_categorical(y_integer_encoded, num_classes=num_classes)\n",
    "print(f\"One-hot encoded labels shape: {y_one_hot.shape}\") # Should be (N, num_classes)\n",
    "\n",
    "# --- Train/Test Split ---\n",
    "print(\"\\nSplitting data into training and testing sets...\")\n",
    "xtrain, xtest, ytrain_one_hot, ytest_one_hot = train_test_split(\n",
    "    X_reshaped,                      # Your embeddings array (N, 1024)\n",
    "    y_one_hot,              # Your one-hot encoded labels (N, num_classes)\n",
    "    test_size=0.2,          # Fraction for the test set\n",
    "    random_state=42,        # For reproducibility\n",
    "    stratify=y_integer_encoded # IMPORTANT: Stratify based on original integer labels\n",
    "                               # to ensure class balance in train/test sets\n",
    ")\n",
    "\n",
    "print(f\"xtrain shape: {xtrain.shape}\") # (N * 0.8, 1024)\n",
    "print(f\"ytrain_one_hot shape: {ytrain_one_hot.shape}\") # (N * 0.8, num_classes)\n",
    "print(f\"xtest shape: {xtest.shape}\") # (N * 0.2, 1024)\n",
    "print(f\"ytest_one_hot shape: {ytest_one_hot.shape}\") # (N * 0.2, num_classes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "328fde5a",
   "metadata": {
    "_cell_guid": "c0d42a1c-377d-4870-a195-8ab8fb3b7380",
    "_uuid": "c5c31e39-febd-40c2-ae5e-f3263d92a9d0",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-05-04T14:26:23.477214Z",
     "iopub.status.busy": "2025-05-04T14:26:23.476847Z",
     "iopub.status.idle": "2025-05-04T14:26:23.601029Z",
     "shell.execute_reply": "2025-05-04T14:26:23.599663Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.135968,
     "end_time": "2025-05-04T14:26:23.602907",
     "exception": false,
     "start_time": "2025-05-04T14:26:23.466939",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Defining and compiling the model...\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"sequential\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">200</span>)                 │         <span style=\"color: #00af00; text-decoration-color: #00af00\">205,000</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">200</span>)                 │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">200</span>)                 │          <span style=\"color: #00af00; text-decoration-color: #00af00\">40,200</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">200</span>)                 │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">200</span>)                 │          <span style=\"color: #00af00; text-decoration-color: #00af00\">40,200</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">200</span>)                 │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">200</span>)                 │          <span style=\"color: #00af00; text-decoration-color: #00af00\">40,200</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">206</span>)                 │          <span style=\"color: #00af00; text-decoration-color: #00af00\">41,406</span> │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ dense (\u001b[38;5;33mDense\u001b[0m)                        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m200\u001b[0m)                 │         \u001b[38;5;34m205,000\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout (\u001b[38;5;33mDropout\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m200\u001b[0m)                 │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m200\u001b[0m)                 │          \u001b[38;5;34m40,200\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_1 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m200\u001b[0m)                 │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m200\u001b[0m)                 │          \u001b[38;5;34m40,200\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_2 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m200\u001b[0m)                 │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_3 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m200\u001b[0m)                 │          \u001b[38;5;34m40,200\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_4 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m206\u001b[0m)                 │          \u001b[38;5;34m41,406\u001b[0m │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">367,006</span> (1.40 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m367,006\u001b[0m (1.40 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">367,006</span> (1.40 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m367,006\u001b[0m (1.40 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model compiled successfully.\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nDefining and compiling the model...\")\n",
    "# --- Define Model ---\n",
    "model = models.Sequential([\n",
    "    # Input shape is now (1024,) after averaging embeddings\n",
    "    layers.Input(shape=(1024,)),\n",
    "    # Flatten layer is not needed if input is 1D before Dense\n",
    "    # layers.Flatten(), # Remove this\n",
    "    layers.Dense(200, activation='relu'),\n",
    "    layers.Dropout(0.1),\n",
    "    layers.Dense(200, activation='relu'),\n",
    "    layers.Dropout(0.1),\n",
    "    layers.Dense(200, activation='relu'),\n",
    "    layers.Dropout(0.1),\n",
    "    layers.Dense(200, activation='relu'),\n",
    "    # Output layer must have 'num_classes' units\n",
    "    layers.Dense(num_classes, activation='softmax')\n",
    "])\n",
    "\n",
    "model.summary()\n",
    "\n",
    "# --- Compile Model ---\n",
    "# Using categorical_crossentropy because ytrain is one-hot encoded\n",
    "model.compile(optimizer='adam',\n",
    "              loss='categorical_crossentropy',\n",
    "              metrics=['accuracy'])\n",
    "\n",
    "print(\"Model compiled successfully.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "9a9e271c",
   "metadata": {
    "_cell_guid": "626c0064-1aa5-4726-8e0a-2bef034c3163",
    "_uuid": "c587b256-b5b9-4798-b931-57815075d174",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-05-04T14:26:23.623831Z",
     "iopub.status.busy": "2025-05-04T14:26:23.623384Z",
     "iopub.status.idle": "2025-05-04T14:26:23.640016Z",
     "shell.execute_reply": "2025-05-04T14:26:23.638859Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.029259,
     "end_time": "2025-05-04T14:26:23.641953",
     "exception": false,
     "start_time": "2025-05-04T14:26:23.612694",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "\n",
    "early_stopping = EarlyStopping(\n",
    "    monitor='val_loss',  # Metric to monitor (usually validation loss or accuracy)\n",
    "    patience=3,         # Number of epochs with no improvement after which training will be stopped\n",
    "    verbose=1,           # Set to 1 to print messages when stopping happens\n",
    "    mode='min',          # 'min' for loss/error metrics, 'max' for accuracy metrics\n",
    "    restore_best_weights=True  # Restore model weights from the epoch with the best value of the monitored quantity.\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "86028845",
   "metadata": {
    "_cell_guid": "e17912b0-2a76-4801-ab44-24280d799315",
    "_uuid": "06142eb2-30f2-4552-9f83-bd1ba457ffe4",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-05-04T14:26:23.663501Z",
     "iopub.status.busy": "2025-05-04T14:26:23.663115Z",
     "iopub.status.idle": "2025-05-04T14:35:26.060349Z",
     "shell.execute_reply": "2025-05-04T14:35:26.058908Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 542.410678,
     "end_time": "2025-05-04T14:35:26.062191",
     "exception": false,
     "start_time": "2025-05-04T14:26:23.651513",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Starting model training...\n",
      "Epoch 1/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 6ms/step - accuracy: 0.1596 - loss: 3.8143 - val_accuracy: 0.3877 - val_loss: 2.4145\n",
      "Epoch 2/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 5ms/step - accuracy: 0.3882 - loss: 2.4009 - val_accuracy: 0.4735 - val_loss: 2.0233\n",
      "Epoch 3/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 5ms/step - accuracy: 0.4555 - loss: 2.0858 - val_accuracy: 0.5196 - val_loss: 1.8450\n",
      "Epoch 4/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 6ms/step - accuracy: 0.4949 - loss: 1.9129 - val_accuracy: 0.5420 - val_loss: 1.7278\n",
      "Epoch 5/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 5ms/step - accuracy: 0.5189 - loss: 1.7935 - val_accuracy: 0.5734 - val_loss: 1.5996\n",
      "Epoch 6/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 5ms/step - accuracy: 0.5352 - loss: 1.7258 - val_accuracy: 0.5682 - val_loss: 1.6164\n",
      "Epoch 7/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 5ms/step - accuracy: 0.5534 - loss: 1.6421 - val_accuracy: 0.5894 - val_loss: 1.5359\n",
      "Epoch 8/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 5ms/step - accuracy: 0.5684 - loss: 1.5943 - val_accuracy: 0.5891 - val_loss: 1.5200\n",
      "Epoch 9/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 5ms/step - accuracy: 0.5757 - loss: 1.5554 - val_accuracy: 0.6140 - val_loss: 1.4459\n",
      "Epoch 10/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 5ms/step - accuracy: 0.5818 - loss: 1.5301 - val_accuracy: 0.6222 - val_loss: 1.4195\n",
      "Epoch 11/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 5ms/step - accuracy: 0.5916 - loss: 1.4872 - val_accuracy: 0.6188 - val_loss: 1.4315\n",
      "Epoch 12/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 5ms/step - accuracy: 0.5977 - loss: 1.4692 - val_accuracy: 0.6311 - val_loss: 1.3788\n",
      "Epoch 13/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 5ms/step - accuracy: 0.6000 - loss: 1.4463 - val_accuracy: 0.6320 - val_loss: 1.3728\n",
      "Epoch 14/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 5ms/step - accuracy: 0.6061 - loss: 1.4310 - val_accuracy: 0.6277 - val_loss: 1.4046\n",
      "Epoch 15/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 5ms/step - accuracy: 0.6099 - loss: 1.4121 - val_accuracy: 0.6296 - val_loss: 1.3714\n",
      "Epoch 16/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 5ms/step - accuracy: 0.6118 - loss: 1.4092 - val_accuracy: 0.6322 - val_loss: 1.3579\n",
      "Epoch 17/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 5ms/step - accuracy: 0.6181 - loss: 1.3742 - val_accuracy: 0.6323 - val_loss: 1.3750\n",
      "Epoch 18/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 5ms/step - accuracy: 0.6230 - loss: 1.3630 - val_accuracy: 0.6487 - val_loss: 1.3313\n",
      "Epoch 19/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 5ms/step - accuracy: 0.6227 - loss: 1.3647 - val_accuracy: 0.6463 - val_loss: 1.3315\n",
      "Epoch 20/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 6ms/step - accuracy: 0.6264 - loss: 1.3517 - val_accuracy: 0.6529 - val_loss: 1.3276\n",
      "Epoch 21/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 6ms/step - accuracy: 0.6260 - loss: 1.3578 - val_accuracy: 0.6457 - val_loss: 1.3218\n",
      "Epoch 22/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 6ms/step - accuracy: 0.6274 - loss: 1.3473 - val_accuracy: 0.6550 - val_loss: 1.2940\n",
      "Epoch 23/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 6ms/step - accuracy: 0.6304 - loss: 1.3332 - val_accuracy: 0.6620 - val_loss: 1.2848\n",
      "Epoch 24/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 5ms/step - accuracy: 0.6354 - loss: 1.3113 - val_accuracy: 0.6448 - val_loss: 1.3333\n",
      "Epoch 25/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 6ms/step - accuracy: 0.6339 - loss: 1.3187 - val_accuracy: 0.6503 - val_loss: 1.3422\n",
      "Epoch 26/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 6ms/step - accuracy: 0.6345 - loss: 1.3160 - val_accuracy: 0.6595 - val_loss: 1.3045\n",
      "Epoch 26: early stopping\n",
      "Restoring model weights from the end of the best epoch: 23.\n",
      "Model training finished.\n",
      "\n",
      "Evaluating model on the test set...\n",
      "Test Loss: 1.2725\n",
      "Test Accuracy: 0.6633\n"
     ]
    }
   ],
   "source": [
    "# --- Train Model ---\n",
    "print(\"\\nStarting model training...\")\n",
    "epochs = 100\n",
    "history = model.fit(\n",
    "    xtrain,\n",
    "    ytrain_one_hot,\n",
    "    epochs=epochs,\n",
    "    validation_split=0.1, # Optional: use part of training data for validation during training\n",
    "    callbacks=[early_stopping]\n",
    "    # Or use validation_data=(xtest, ytest_one_hot) - be careful not to \"tune\" on test set\n",
    ")\n",
    "\n",
    "print(\"Model training finished.\")\n",
    "\n",
    "# --- Evaluate Model (Optional) ---\n",
    "print(\"\\nEvaluating model on the test set...\")\n",
    "loss, accuracy = model.evaluate(xtest, ytest_one_hot, verbose=0)\n",
    "print(f\"Test Loss: {loss:.4f}\")\n",
    "print(f\"Test Accuracy: {accuracy:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "96dc14bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-04T14:35:27.295315Z",
     "iopub.status.busy": "2025-05-04T14:35:27.294944Z",
     "iopub.status.idle": "2025-05-04T14:35:27.939939Z",
     "shell.execute_reply": "2025-05-04T14:35:27.938757Z"
    },
    "papermill": {
     "duration": 1.302944,
     "end_time": "2025-05-04T14:35:27.941899",
     "exception": false,
     "start_time": "2025-05-04T14:35:26.638955",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1400x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot training & validation accuracy values\n",
    "plt.figure(figsize=(14, 5))\n",
    "\n",
    "# ---- Accuracy ----\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['accuracy'], label='Training Accuracy')\n",
    "if 'val_accuracy' in history.history:\n",
    "    plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
    "plt.title('Model Accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "\n",
    "# ---- Loss ----\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "if 'val_loss' in history.history:\n",
    "    plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "c9f5d9d6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-04T14:35:29.089130Z",
     "iopub.status.busy": "2025-05-04T14:35:29.088561Z",
     "iopub.status.idle": "2025-05-04T14:35:29.197589Z",
     "shell.execute_reply": "2025-05-04T14:35:29.196507Z"
    },
    "papermill": {
     "duration": 0.677454,
     "end_time": "2025-05-04T14:35:29.199369",
     "exception": false,
     "start_time": "2025-05-04T14:35:28.521915",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional_1\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"functional_1\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)              </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">        Param # </span>┃<span style=\"font-weight: bold\"> Connected to           </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ input_layer_1             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>)           │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                      │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)              │                        │                │                        │\n",
       "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
       "│ dense_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)            │        <span style=\"color: #00af00; text-decoration-color: #00af00\">524,800</span> │ input_layer_1[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]    │\n",
       "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
       "│ layer_normalization       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)            │          <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │ dense_5[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]          │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LayerNormalization</span>)      │                        │                │                        │\n",
       "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)            │        <span style=\"color: #00af00; text-decoration-color: #00af00\">262,656</span> │ layer_normalization[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>… │\n",
       "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
       "│ layer_normalization_1     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)            │          <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │ dense_6[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]          │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LayerNormalization</span>)      │                        │                │                        │\n",
       "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
       "│ add (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Add</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)            │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ layer_normalization_1… │\n",
       "│                           │                        │                │ layer_normalization[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>… │\n",
       "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
       "│ dense_7 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)            │        <span style=\"color: #00af00; text-decoration-color: #00af00\">131,328</span> │ add[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]              │\n",
       "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
       "│ dropout_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)            │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ dense_7[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]          │\n",
       "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
       "│ dense_8 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │         <span style=\"color: #00af00; text-decoration-color: #00af00\">32,896</span> │ dropout_3[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]        │\n",
       "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
       "│ dropout_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ dense_8[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]          │\n",
       "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
       "│ dense_9 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">206</span>)            │         <span style=\"color: #00af00; text-decoration-color: #00af00\">26,574</span> │ dropout_4[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]        │\n",
       "└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ input_layer_1             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1024\u001b[0m)           │              \u001b[38;5;34m0\u001b[0m │ -                      │\n",
       "│ (\u001b[38;5;33mInputLayer\u001b[0m)              │                        │                │                        │\n",
       "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
       "│ dense_5 (\u001b[38;5;33mDense\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)            │        \u001b[38;5;34m524,800\u001b[0m │ input_layer_1[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]    │\n",
       "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
       "│ layer_normalization       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)            │          \u001b[38;5;34m1,024\u001b[0m │ dense_5[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]          │\n",
       "│ (\u001b[38;5;33mLayerNormalization\u001b[0m)      │                        │                │                        │\n",
       "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)            │        \u001b[38;5;34m262,656\u001b[0m │ layer_normalization[\u001b[38;5;34m0\u001b[0m… │\n",
       "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
       "│ layer_normalization_1     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)            │          \u001b[38;5;34m1,024\u001b[0m │ dense_6[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]          │\n",
       "│ (\u001b[38;5;33mLayerNormalization\u001b[0m)      │                        │                │                        │\n",
       "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
       "│ add (\u001b[38;5;33mAdd\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)            │              \u001b[38;5;34m0\u001b[0m │ layer_normalization_1… │\n",
       "│                           │                        │                │ layer_normalization[\u001b[38;5;34m0\u001b[0m… │\n",
       "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
       "│ dense_7 (\u001b[38;5;33mDense\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)            │        \u001b[38;5;34m131,328\u001b[0m │ add[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]              │\n",
       "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
       "│ dropout_3 (\u001b[38;5;33mDropout\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)            │              \u001b[38;5;34m0\u001b[0m │ dense_7[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]          │\n",
       "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
       "│ dense_8 (\u001b[38;5;33mDense\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │         \u001b[38;5;34m32,896\u001b[0m │ dropout_3[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]        │\n",
       "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
       "│ dropout_4 (\u001b[38;5;33mDropout\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │              \u001b[38;5;34m0\u001b[0m │ dense_8[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]          │\n",
       "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
       "│ dense_9 (\u001b[38;5;33mDense\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m206\u001b[0m)            │         \u001b[38;5;34m26,574\u001b[0m │ dropout_4[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]        │\n",
       "└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">980,302</span> (3.74 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m980,302\u001b[0m (3.74 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">980,302</span> (3.74 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m980,302\u001b[0m (3.74 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from tensorflow.keras import layers, models, Input\n",
    "\n",
    "# Define the model\n",
    "inputs = Input(shape=(1024,))\n",
    "x = layers.Dense(512, activation='relu')(inputs)\n",
    "x = layers.LayerNormalization()(x)\n",
    "\n",
    "# Residual Block\n",
    "x_shortcut = x\n",
    "x = layers.Dense(512, activation='relu')(x)\n",
    "x = layers.LayerNormalization()(x)\n",
    "x = layers.Add()([x, x_shortcut])  # Residual connection\n",
    "\n",
    "# Deeper layers\n",
    "x = layers.Dense(256, activation='relu')(x)\n",
    "x = layers.Dropout(0.3)(x)\n",
    "x = layers.Dense(128, activation='relu')(x)\n",
    "x = layers.Dropout(0.2)(x)\n",
    "\n",
    "# Output layer\n",
    "outputs = layers.Dense(num_classes, activation='softmax')(x)\n",
    "\n",
    "# Build the model\n",
    "model = models.Model(inputs=inputs, outputs=outputs)\n",
    "\n",
    "# Compile the model\n",
    "model.compile(\n",
    "    optimizer='adam',\n",
    "    loss='categorical_crossentropy',\n",
    "    metrics=['accuracy']\n",
    ")\n",
    "\n",
    "# Show summary (optional)\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "0d4f4c9e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-04T14:35:30.410306Z",
     "iopub.status.busy": "2025-05-04T14:35:30.409713Z",
     "iopub.status.idle": "2025-05-04T14:35:30.415511Z",
     "shell.execute_reply": "2025-05-04T14:35:30.414519Z"
    },
    "papermill": {
     "duration": 0.579978,
     "end_time": "2025-05-04T14:35:30.417180",
     "exception": false,
     "start_time": "2025-05-04T14:35:29.837202",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "early_stopping = EarlyStopping(\n",
    "    monitor='val_loss',  # Metric to monitor (usually validation loss or accuracy)\n",
    "    patience=5,         # Number of epochs with no improvement after which training will be stopped\n",
    "    verbose=1,           # Set to 1 to print messages when stopping happens\n",
    "    mode='min',          # 'min' for loss/error metrics, 'max' for accuracy metrics\n",
    "    restore_best_weights=True  # Restore model weights from the epoch with the best value of the monitored quantity.\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "88a7adfa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-04T14:35:31.663285Z",
     "iopub.status.busy": "2025-05-04T14:35:31.662877Z",
     "iopub.status.idle": "2025-05-04T14:59:54.040183Z",
     "shell.execute_reply": "2025-05-04T14:59:54.038939Z"
    },
    "papermill": {
     "duration": 1463.040223,
     "end_time": "2025-05-04T14:59:54.042139",
     "exception": false,
     "start_time": "2025-05-04T14:35:31.001916",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Starting model training...\n",
      "Epoch 1/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 11ms/step - accuracy: 0.1236 - loss: 4.1375 - val_accuracy: 0.4025 - val_loss: 2.4151\n",
      "Epoch 2/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 11ms/step - accuracy: 0.3452 - loss: 2.6498 - val_accuracy: 0.4804 - val_loss: 2.0291\n",
      "Epoch 3/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 11ms/step - accuracy: 0.4266 - loss: 2.2791 - val_accuracy: 0.5342 - val_loss: 1.8147\n",
      "Epoch 4/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 11ms/step - accuracy: 0.4725 - loss: 2.0521 - val_accuracy: 0.5406 - val_loss: 1.7603\n",
      "Epoch 5/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 10ms/step - accuracy: 0.5047 - loss: 1.9189 - val_accuracy: 0.5785 - val_loss: 1.6139\n",
      "Epoch 6/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 11ms/step - accuracy: 0.5344 - loss: 1.7896 - val_accuracy: 0.5824 - val_loss: 1.5827\n",
      "Epoch 7/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 10ms/step - accuracy: 0.5533 - loss: 1.7057 - val_accuracy: 0.6089 - val_loss: 1.4798\n",
      "Epoch 8/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 11ms/step - accuracy: 0.5685 - loss: 1.6424 - val_accuracy: 0.6219 - val_loss: 1.4256\n",
      "Epoch 9/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 11ms/step - accuracy: 0.5842 - loss: 1.5850 - val_accuracy: 0.6315 - val_loss: 1.4101\n",
      "Epoch 10/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 10ms/step - accuracy: 0.5948 - loss: 1.5265 - val_accuracy: 0.6350 - val_loss: 1.4042\n",
      "Epoch 11/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 10ms/step - accuracy: 0.6083 - loss: 1.4779 - val_accuracy: 0.6395 - val_loss: 1.3613\n",
      "Epoch 12/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 11ms/step - accuracy: 0.6161 - loss: 1.4427 - val_accuracy: 0.6502 - val_loss: 1.3190\n",
      "Epoch 13/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 10ms/step - accuracy: 0.6238 - loss: 1.4134 - val_accuracy: 0.6514 - val_loss: 1.3007\n",
      "Epoch 14/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 10ms/step - accuracy: 0.6327 - loss: 1.3791 - val_accuracy: 0.6585 - val_loss: 1.3085\n",
      "Epoch 15/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 10ms/step - accuracy: 0.6403 - loss: 1.3448 - val_accuracy: 0.6554 - val_loss: 1.2879\n",
      "Epoch 16/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 10ms/step - accuracy: 0.6417 - loss: 1.3395 - val_accuracy: 0.6605 - val_loss: 1.2932\n",
      "Epoch 17/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 10ms/step - accuracy: 0.6502 - loss: 1.3070 - val_accuracy: 0.6706 - val_loss: 1.2606\n",
      "Epoch 18/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 10ms/step - accuracy: 0.6569 - loss: 1.2817 - val_accuracy: 0.6686 - val_loss: 1.2693\n",
      "Epoch 19/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 10ms/step - accuracy: 0.6621 - loss: 1.2607 - val_accuracy: 0.6751 - val_loss: 1.2228\n",
      "Epoch 20/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 10ms/step - accuracy: 0.6655 - loss: 1.2508 - val_accuracy: 0.6847 - val_loss: 1.2101\n",
      "Epoch 21/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 10ms/step - accuracy: 0.6690 - loss: 1.2380 - val_accuracy: 0.6829 - val_loss: 1.2229\n",
      "Epoch 22/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 10ms/step - accuracy: 0.6723 - loss: 1.2168 - val_accuracy: 0.6840 - val_loss: 1.2077\n",
      "Epoch 23/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 10ms/step - accuracy: 0.6750 - loss: 1.2038 - val_accuracy: 0.6794 - val_loss: 1.2363\n",
      "Epoch 24/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 10ms/step - accuracy: 0.6819 - loss: 1.1871 - val_accuracy: 0.6772 - val_loss: 1.2464\n",
      "Epoch 25/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 10ms/step - accuracy: 0.6808 - loss: 1.1865 - val_accuracy: 0.6856 - val_loss: 1.2086\n",
      "Epoch 26/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 11ms/step - accuracy: 0.6861 - loss: 1.1565 - val_accuracy: 0.6845 - val_loss: 1.2307\n",
      "Epoch 27/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 11ms/step - accuracy: 0.6839 - loss: 1.1701 - val_accuracy: 0.6961 - val_loss: 1.1830\n",
      "Epoch 28/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 10ms/step - accuracy: 0.6891 - loss: 1.1547 - val_accuracy: 0.6892 - val_loss: 1.1913\n",
      "Epoch 29/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 10ms/step - accuracy: 0.6916 - loss: 1.1345 - val_accuracy: 0.6855 - val_loss: 1.2139\n",
      "Epoch 30/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 10ms/step - accuracy: 0.6958 - loss: 1.1279 - val_accuracy: 0.6874 - val_loss: 1.2059\n",
      "Epoch 31/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 10ms/step - accuracy: 0.6936 - loss: 1.1271 - val_accuracy: 0.6904 - val_loss: 1.2339\n",
      "Epoch 32/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 11ms/step - accuracy: 0.6993 - loss: 1.1088 - val_accuracy: 0.7006 - val_loss: 1.1795\n",
      "Epoch 33/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 10ms/step - accuracy: 0.6998 - loss: 1.1093 - val_accuracy: 0.6989 - val_loss: 1.2047\n",
      "Epoch 34/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 11ms/step - accuracy: 0.7028 - loss: 1.0967 - val_accuracy: 0.6943 - val_loss: 1.1953\n",
      "Epoch 35/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 11ms/step - accuracy: 0.7035 - loss: 1.0911 - val_accuracy: 0.6900 - val_loss: 1.2190\n",
      "Epoch 36/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 10ms/step - accuracy: 0.7074 - loss: 1.0797 - val_accuracy: 0.6974 - val_loss: 1.2097\n",
      "Epoch 37/100\n",
      "\u001b[1m3752/3752\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 10ms/step - accuracy: 0.7090 - loss: 1.0669 - val_accuracy: 0.6892 - val_loss: 1.2087\n",
      "Epoch 37: early stopping\n",
      "Restoring model weights from the end of the best epoch: 32.\n",
      "Model training finished.\n",
      "\n",
      "Evaluating model on the test set...\n",
      "Test Loss: 1.1649\n",
      "Test Accuracy: 0.7062\n"
     ]
    }
   ],
   "source": [
    "# --- Train Model ---\n",
    "print(\"\\nStarting model training...\")\n",
    "epochs = 100\n",
    "history = model.fit(\n",
    "    xtrain,\n",
    "    ytrain_one_hot,\n",
    "    epochs=epochs,\n",
    "    validation_split=0.1, # Optional: use part of training data for validation during training\n",
    "    callbacks=[early_stopping]\n",
    "    # Or use validation_data=(xtest, ytest_one_hot) - be careful not to \"tune\" on test set\n",
    ")\n",
    "\n",
    "print(\"Model training finished.\")\n",
    "\n",
    "# --- Evaluate Model (Optional) ---\n",
    "print(\"\\nEvaluating model on the test set...\")\n",
    "loss, accuracy = model.evaluate(xtest, ytest_one_hot, verbose=0)\n",
    "print(f\"Test Loss: {loss:.4f}\")\n",
    "print(f\"Test Accuracy: {accuracy:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "02d0a332",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-04T14:59:58.466792Z",
     "iopub.status.busy": "2025-05-04T14:59:58.466143Z",
     "iopub.status.idle": "2025-05-04T14:59:59.697678Z",
     "shell.execute_reply": "2025-05-04T14:59:59.696489Z"
    },
    "papermill": {
     "duration": 3.502839,
     "end_time": "2025-05-04T14:59:59.699949",
     "exception": false,
     "start_time": "2025-05-04T14:59:56.197110",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1400x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot training & validation accuracy values\n",
    "plt.figure(figsize=(14, 5))\n",
    "\n",
    "# ---- Accuracy ----\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['accuracy'], label='Training Accuracy')\n",
    "if 'val_accuracy' in history.history:\n",
    "    plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
    "plt.title('Model Accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "\n",
    "# ---- Loss ----\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "if 'val_loss' in history.history:\n",
    "    plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fdbf53d7",
   "metadata": {
    "papermill": {
     "duration": 2.121617,
     "end_time": "2025-05-04T15:00:04.056619",
     "exception": false,
     "start_time": "2025-05-04T15:00:01.935002",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 11361821,
     "sourceId": 91844,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30918,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3624.175248,
   "end_time": "2025-05-04T15:00:09.955627",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-04T13:59:45.780379",
   "version": "2.6.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "094fca6e4d984c52944156291832dc82": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "162b1489fc5447ee993a1ce0386a1a24": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f2b43068899441578773e29c8e25bc61",
       "placeholder": "​",
       "style": "IPY_MODEL_9da6cd67d3dc4281933ec3c4959f9b71",
       "tabbable": null,
       "tooltip": null,
       "value": " 166725/166725 [22:44&lt;00:00, 120.16it/s]"
      }
     },
     "1baffe8cb6b84ceb8df0341b25c7fba3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1c39d366c95c4be89bbb47a86c20376b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "2fffe2ea1fe344abb6a69df809761732": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_094fca6e4d984c52944156291832dc82",
       "max": 414.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_414feff69d8c4e6bb8b4058a7f2ccecf",
       "tabbable": null,
       "tooltip": null,
       "value": 414.0
      }
     },
     "388a517a51ec4b25be47ae12e955d2c8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9a0aa82503714508ac46047b8d5c0343",
       "placeholder": "​",
       "style": "IPY_MODEL_1c39d366c95c4be89bbb47a86c20376b",
       "tabbable": null,
       "tooltip": null,
       "value": "Reading audio files: 100%"
      }
     },
     "414feff69d8c4e6bb8b4058a7f2ccecf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "57760a4f3acc43a58c5065803ea45a0f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5ce92dffc17f432ebb3ea61b235841fe": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_388a517a51ec4b25be47ae12e955d2c8",
        "IPY_MODEL_2fffe2ea1fe344abb6a69df809761732",
        "IPY_MODEL_7af2ac8136c04dc88a315a00475bab1c"
       ],
       "layout": "IPY_MODEL_f25c44b7c11a46599e7595517cb8a04f",
       "tabbable": null,
       "tooltip": null
      }
     },
     "6068c8160ce54511aab0a1dd223dbe21": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "75734198ac194f0abdca47b7a53a7e64": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "78623f5e3082494ea290b2b2afd475e5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7af2ac8136c04dc88a315a00475bab1c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_78623f5e3082494ea290b2b2afd475e5",
       "placeholder": "​",
       "style": "IPY_MODEL_75734198ac194f0abdca47b7a53a7e64",
       "tabbable": null,
       "tooltip": null,
       "value": " 414/414 [02:24&lt;00:00,  1.31it/s]"
      }
     },
     "7cb4cdba198248869e0aa302bad87f61": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_fa02ce917da64671b9355a1463a1965a",
        "IPY_MODEL_9b9f959d4b5940ec80e7d17748490889",
        "IPY_MODEL_162b1489fc5447ee993a1ce0386a1a24"
       ],
       "layout": "IPY_MODEL_d296b00d14354236a091a1f4a9118496",
       "tabbable": null,
       "tooltip": null
      }
     },
     "82ca76c439c744139c932bc5ed29d4bb": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "841a234ffa574778b7981803f3db8e31": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "9a0aa82503714508ac46047b8d5c0343": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9b0138ffd5274b97a44964aebe7f284a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9b9f959d4b5940ec80e7d17748490889": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_57760a4f3acc43a58c5065803ea45a0f",
       "max": 166725.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_aeec46293e064dcba1e84d81ee4e4c08",
       "tabbable": null,
       "tooltip": null,
       "value": 166725.0
      }
     },
     "9da6cd67d3dc4281933ec3c4959f9b71": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "a8d885afca23486fb6920e24368ae58e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "aeec46293e064dcba1e84d81ee4e4c08": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "b438e4c8820f48f19457168bf27f1da0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "bcfae0fa1ec94b43972d20900cc1f8be": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_82ca76c439c744139c932bc5ed29d4bb",
       "placeholder": "​",
       "style": "IPY_MODEL_6068c8160ce54511aab0a1dd223dbe21",
       "tabbable": null,
       "tooltip": null,
       "value": "Processing Audio: 100%"
      }
     },
     "bd3c9437f5dc4386aeb55b2cc96a3912": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_1baffe8cb6b84ceb8df0341b25c7fba3",
       "placeholder": "​",
       "style": "IPY_MODEL_841a234ffa574778b7981803f3db8e31",
       "tabbable": null,
       "tooltip": null,
       "value": " 412/412 [00:01&lt;00:00, 304.06it/s]"
      }
     },
     "ce8f07d626db48b6a42b39c34b4b9a10": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d296b00d14354236a091a1f4a9118496": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d54c9ab9c73b4f5d9f9c6548a8691ace": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_bcfae0fa1ec94b43972d20900cc1f8be",
        "IPY_MODEL_f9cc07fd71ae430cb893670ec877db98",
        "IPY_MODEL_bd3c9437f5dc4386aeb55b2cc96a3912"
       ],
       "layout": "IPY_MODEL_ce8f07d626db48b6a42b39c34b4b9a10",
       "tabbable": null,
       "tooltip": null
      }
     },
     "d9d62698f7ee40c4b9fc6552a14419e9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f25c44b7c11a46599e7595517cb8a04f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f2b43068899441578773e29c8e25bc61": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f9cc07fd71ae430cb893670ec877db98": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_d9d62698f7ee40c4b9fc6552a14419e9",
       "max": 412.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_b438e4c8820f48f19457168bf27f1da0",
       "tabbable": null,
       "tooltip": null,
       "value": 412.0
      }
     },
     "fa02ce917da64671b9355a1463a1965a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9b0138ffd5274b97a44964aebe7f284a",
       "placeholder": "​",
       "style": "IPY_MODEL_a8d885afca23486fb6920e24368ae58e",
       "tabbable": null,
       "tooltip": null,
       "value": "Generating Audio Embeddings: 100%"
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
